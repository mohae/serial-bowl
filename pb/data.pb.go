// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	data.proto

It has these top-level messages:
	BasicMemInfo
	MemInfo
	Message
	RedditAccount
	AccountData
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type BasicMemInfo struct {
	MemTotal     int64 `protobuf:"varint,1,opt,name=MemTotal,json=memTotal" json:"MemTotal,omitempty"`
	MemFree      int64 `protobuf:"varint,2,opt,name=MemFree,json=memFree" json:"MemFree,omitempty"`
	MemAvailable int64 `protobuf:"varint,3,opt,name=MemAvailable,json=memAvailable" json:"MemAvailable,omitempty"`
	Buffers      int64 `protobuf:"varint,4,opt,name=Buffers,json=buffers" json:"Buffers,omitempty"`
	Cached       int64 `protobuf:"varint,5,opt,name=Cached,json=cached" json:"Cached,omitempty"`
	SwapCached   int64 `protobuf:"varint,6,opt,name=SwapCached,json=swapCached" json:"SwapCached,omitempty"`
	SwapTotal    int64 `protobuf:"varint,7,opt,name=SwapTotal,json=swapTotal" json:"SwapTotal,omitempty"`
	SwapFree     int64 `protobuf:"varint,8,opt,name=SwapFree,json=swapFree" json:"SwapFree,omitempty"`
}

func (m *BasicMemInfo) Reset()                    { *m = BasicMemInfo{} }
func (m *BasicMemInfo) String() string            { return proto.CompactTextString(m) }
func (*BasicMemInfo) ProtoMessage()               {}
func (*BasicMemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MemInfo struct {
	MemTotal          int64 `protobuf:"varint,1,opt,name=MemTotal,json=memTotal" json:"MemTotal,omitempty"`
	MemFree           int64 `protobuf:"varint,2,opt,name=MemFree,json=memFree" json:"MemFree,omitempty"`
	MemAvailable      int64 `protobuf:"varint,3,opt,name=MemAvailable,json=memAvailable" json:"MemAvailable,omitempty"`
	Buffers           int64 `protobuf:"varint,4,opt,name=Buffers,json=buffers" json:"Buffers,omitempty"`
	Cached            int64 `protobuf:"varint,5,opt,name=Cached,json=cached" json:"Cached,omitempty"`
	SwapCached        int64 `protobuf:"varint,6,opt,name=SwapCached,json=swapCached" json:"SwapCached,omitempty"`
	Active            int64 `protobuf:"varint,7,opt,name=Active,json=active" json:"Active,omitempty"`
	Inactive          int64 `protobuf:"varint,8,opt,name=Inactive,json=inactive" json:"Inactive,omitempty"`
	ActiveAnon        int64 `protobuf:"varint,9,opt,name=ActiveAnon,json=activeAnon" json:"ActiveAnon,omitempty"`
	InactiveAnon      int64 `protobuf:"varint,10,opt,name=InactiveAnon,json=inactiveAnon" json:"InactiveAnon,omitempty"`
	ActiveFile        int64 `protobuf:"varint,11,opt,name=ActiveFile,json=activeFile" json:"ActiveFile,omitempty"`
	InactiveFile      int64 `protobuf:"varint,12,opt,name=InactiveFile,json=inactiveFile" json:"InactiveFile,omitempty"`
	Unevictable       int64 `protobuf:"varint,13,opt,name=Unevictable,json=unevictable" json:"Unevictable,omitempty"`
	Mlocked           int64 `protobuf:"varint,14,opt,name=Mlocked,json=mlocked" json:"Mlocked,omitempty"`
	SwapTotal         int64 `protobuf:"varint,15,opt,name=SwapTotal,json=swapTotal" json:"SwapTotal,omitempty"`
	SwapFree          int64 `protobuf:"varint,16,opt,name=SwapFree,json=swapFree" json:"SwapFree,omitempty"`
	Dirty             int64 `protobuf:"varint,17,opt,name=Dirty,json=dirty" json:"Dirty,omitempty"`
	Writeback         int64 `protobuf:"varint,18,opt,name=Writeback,json=writeback" json:"Writeback,omitempty"`
	AnonPages         int64 `protobuf:"varint,19,opt,name=AnonPages,json=anonPages" json:"AnonPages,omitempty"`
	Mapped            int64 `protobuf:"varint,20,opt,name=Mapped,json=mapped" json:"Mapped,omitempty"`
	Shmem             int64 `protobuf:"varint,21,opt,name=Shmem,json=shmem" json:"Shmem,omitempty"`
	Slab              int64 `protobuf:"varint,22,opt,name=Slab,json=slab" json:"Slab,omitempty"`
	SReclaimable      int64 `protobuf:"varint,23,opt,name=SReclaimable,json=sReclaimable" json:"SReclaimable,omitempty"`
	SUnreclaim        int64 `protobuf:"varint,24,opt,name=SUnreclaim,json=sUnreclaim" json:"SUnreclaim,omitempty"`
	KernelStack       int64 `protobuf:"varint,25,opt,name=KernelStack,json=kernelStack" json:"KernelStack,omitempty"`
	NFSUnstable       int64 `protobuf:"varint,26,opt,name=NFSUnstable,json=nFSUnstable" json:"NFSUnstable,omitempty"`
	Bounce            int64 `protobuf:"varint,27,opt,name=Bounce,json=bounce" json:"Bounce,omitempty"`
	WritebackTmp      int64 `protobuf:"varint,28,opt,name=WritebackTmp,json=writebackTmp" json:"WritebackTmp,omitempty"`
	CommitLimit       int64 `protobuf:"varint,29,opt,name=CommitLimit,json=commitLimit" json:"CommitLimit,omitempty"`
	VmallocTotal      int64 `protobuf:"varint,30,opt,name=VmallocTotal,json=vmallocTotal" json:"VmallocTotal,omitempty"`
	VmallocUsed       int64 `protobuf:"varint,31,opt,name=VmallocUsed,json=vmallocUsed" json:"VmallocUsed,omitempty"`
	VmallocChunk      int64 `protobuf:"varint,32,opt,name=VmallocChunk,json=vmallocChunk" json:"VmallocChunk,omitempty"`
	HardwareCorrupted int64 `protobuf:"varint,33,opt,name=HardwareCorrupted,json=hardwareCorrupted" json:"HardwareCorrupted,omitempty"`
	AnonHugePages     int64 `protobuf:"varint,34,opt,name=AnonHugePages,json=anonHugePages" json:"AnonHugePages,omitempty"`
	HugePagesTotal    int64 `protobuf:"varint,35,opt,name=HugePagesTotal,json=hugePagesTotal" json:"HugePagesTotal,omitempty"`
	HugePagesFree     int64 `protobuf:"varint,36,opt,name=HugePagesFree,json=hugePagesFree" json:"HugePagesFree,omitempty"`
	HugePagesRsvd     int64 `protobuf:"varint,37,opt,name=HugePagesRsvd,json=hugePagesRsvd" json:"HugePagesRsvd,omitempty"`
	Hugepagesize      int64 `protobuf:"varint,38,opt,name=Hugepagesize,json=hugepagesize" json:"Hugepagesize,omitempty"`
	DirectMap4K       int64 `protobuf:"varint,39,opt,name=DirectMap4k,json=directMap4k" json:"DirectMap4k,omitempty"`
	DirectMap2M       int64 `protobuf:"varint,40,opt,name=DirectMap2M,json=directMap2M" json:"DirectMap2M,omitempty"`
}

func (m *MemInfo) Reset()                    { *m = MemInfo{} }
func (m *MemInfo) String() string            { return proto.CompactTextString(m) }
func (*MemInfo) ProtoMessage()               {}
func (*MemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Message struct {
	ID     []byte `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	DestID uint32 `protobuf:"fixed32,2,opt,name=DestID,json=destID" json:"DestID,omitempty"`
	Type   int32  `protobuf:"varint,3,opt,name=Type,json=type" json:"Type,omitempty"`
	Kind   int32  `protobuf:"varint,4,opt,name=Kind,json=kind" json:"Kind,omitempty"`
	Data   []byte `protobuf:"bytes,5,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RedditAccount struct {
	ID   string       `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name string       `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Kind string       `protobuf:"bytes,3,opt,name=Kind,json=kind" json:"Kind,omitempty"`
	Data *AccountData `protobuf:"bytes,4,opt,name=Data,json=data" json:"Data,omitempty"`
}

func (m *RedditAccount) Reset()                    { *m = RedditAccount{} }
func (m *RedditAccount) String() string            { return proto.CompactTextString(m) }
func (*RedditAccount) ProtoMessage()               {}
func (*RedditAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RedditAccount) GetData() *AccountData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AccountData struct {
	CommentKarma int64  `protobuf:"varint,1,opt,name=CommentKarma,json=commentKarma" json:"CommentKarma,omitempty"`
	HasMail      bool   `protobuf:"varint,2,opt,name=HasMail,json=hasMail" json:"HasMail,omitempty"`
	HasModMail   bool   `protobuf:"varint,3,opt,name=HasModMail,json=hasModMail" json:"HasModMail,omitempty"`
	ID           string `protobuf:"bytes,4,opt,name=ID,json=iD" json:"ID,omitempty"`
	InboxCount   int64  `protobuf:"varint,5,opt,name=InboxCount,json=inboxCount" json:"InboxCount,omitempty"`
	IsFriend     bool   `protobuf:"varint,6,opt,name=IsFriend,json=isFriend" json:"IsFriend,omitempty"`
	IsGold       bool   `protobuf:"varint,7,opt,name=IsGold,json=isGold" json:"IsGold,omitempty"`
	LinkKarma    int64  `protobuf:"varint,8,opt,name=LinkKarma,json=linkKarma" json:"LinkKarma,omitempty"`
	ModHash      string `protobuf:"bytes,9,opt,name=ModHash,json=modHash" json:"ModHash,omitempty"`
	Name         string `protobuf:"bytes,10,opt,name=Name,json=name" json:"Name,omitempty"`
	Over18       bool   `protobuf:"varint,11,opt,name=Over18,json=over18" json:"Over18,omitempty"`
}

func (m *AccountData) Reset()                    { *m = AccountData{} }
func (m *AccountData) String() string            { return proto.CompactTextString(m) }
func (*AccountData) ProtoMessage()               {}
func (*AccountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*BasicMemInfo)(nil), "protobuf.BasicMemInfo")
	proto.RegisterType((*MemInfo)(nil), "protobuf.MemInfo")
	proto.RegisterType((*Message)(nil), "protobuf.Message")
	proto.RegisterType((*RedditAccount)(nil), "protobuf.RedditAccount")
	proto.RegisterType((*AccountData)(nil), "protobuf.AccountData")
}

var fileDescriptor0 = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x55, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0x57, 0xd3, 0x34, 0x1f, 0x93, 0xb4, 0x50, 0xb3, 0xbb, 0x0c, 0xcb, 0xb2, 0x94, 0xb0, 0x2c,
	0x8b, 0x84, 0x2a, 0x51, 0x38, 0x70, 0x6d, 0x13, 0x95, 0x46, 0xdd, 0x2c, 0xc8, 0x69, 0x41, 0xe2,
	0x36, 0xb1, 0xa7, 0xeb, 0x51, 0xec, 0xb1, 0xe5, 0x99, 0xa4, 0x94, 0x7f, 0x8b, 0x7f, 0x8d, 0x1b,
	0x17, 0xde, 0x87, 0xe3, 0x38, 0x3d, 0x70, 0xe7, 0xd2, 0xce, 0xfb, 0xbd, 0x37, 0xbf, 0x79, 0x5f,
	0xf9, 0x59, 0x88, 0x58, 0x79, 0x75, 0x5a, 0x94, 0xb9, 0xcf, 0x83, 0x1e, 0xfd, 0x5b, 0xac, 0xee,
	0x46, 0x7f, 0xef, 0x89, 0xe1, 0x85, 0x72, 0x26, 0x9a, 0xe9, 0x6c, 0x6a, 0xef, 0xf2, 0xe0, 0xb9,
	0xe8, 0xc1, 0xf1, 0x26, 0xf7, 0x2a, 0x95, 0x7b, 0x27, 0x7b, 0x6f, 0xf6, 0xc3, 0x5e, 0x56, 0xd9,
	0x81, 0x14, 0x5d, 0xf0, 0x5d, 0x96, 0x5a, 0xcb, 0x16, 0xb9, 0xba, 0x19, 0x9b, 0xc1, 0x48, 0x0c,
	0xc1, 0x73, 0xbe, 0x56, 0x26, 0x55, 0x8b, 0x54, 0xcb, 0x7d, 0x72, 0x0f, 0xb3, 0x06, 0x86, 0xb7,
	0x2f, 0x56, 0x77, 0x77, 0xba, 0x74, 0xb2, 0xcd, 0xb7, 0x17, 0x6c, 0x06, 0xcf, 0x44, 0x67, 0xac,
	0xa2, 0x44, 0xc7, 0xf2, 0x80, 0x1c, 0x9d, 0x88, 0xac, 0xe0, 0xa5, 0x10, 0xf3, 0x7b, 0x55, 0x54,
	0xbe, 0x0e, 0xf9, 0x84, 0xab, 0x91, 0xe0, 0x85, 0xe8, 0xa3, 0x9f, 0x93, 0xed, 0x92, 0xbb, 0xef,
	0x36, 0x00, 0x56, 0x82, 0x5e, 0x4a, 0xb7, 0xc7, 0x95, 0xb8, 0xca, 0x1e, 0xfd, 0xd3, 0xa7, 0x52,
	0xfe, 0x77, 0x15, 0xc3, 0xbd, 0xf3, 0xc8, 0x9b, 0xb5, 0xae, 0xca, 0xed, 0x28, 0xb2, 0xb0, 0x86,
	0xa9, 0xe5, 0xf3, 0xa6, 0x56, 0x53, 0xd9, 0xc8, 0xc9, 0x77, 0xce, 0x6d, 0x6e, 0x65, 0x9f, 0x39,
	0x55, 0x8d, 0x60, 0x25, 0x9b, 0xbb, 0x14, 0x21, 0xb8, 0x12, 0xd3, 0xc0, 0xb6, 0x1c, 0x97, 0x06,
	0x6a, 0x1d, 0x34, 0x39, 0x10, 0x69, 0x72, 0x50, 0xc4, 0x70, 0x97, 0x83, 0x62, 0x4e, 0xc4, 0xe0,
	0xd6, 0xea, 0xb5, 0x89, 0x3c, 0x35, 0xec, 0x90, 0x42, 0x06, 0xab, 0x2d, 0x44, 0xdd, 0x4e, 0xf3,
	0x68, 0x09, 0xa5, 0x1f, 0x55, 0xdd, 0x66, 0x73, 0x77, 0xd2, 0x1f, 0xfc, 0xd7, 0xa4, 0x3f, 0xdc,
	0x9d, 0x74, 0xf0, 0x44, 0x1c, 0x4c, 0x4c, 0xe9, 0x1f, 0xe4, 0x31, 0x39, 0x0e, 0x62, 0x34, 0x90,
	0xef, 0xb7, 0xd2, 0x78, 0xbd, 0x50, 0xd1, 0x52, 0x06, 0xcc, 0x77, 0xbf, 0x01, 0xd0, 0x8b, 0x55,
	0xff, 0xa2, 0xde, 0x6b, 0x27, 0x3f, 0x62, 0xaf, 0xda, 0x00, 0x38, 0x83, 0x99, 0x2a, 0x0a, 0x48,
	0xf2, 0x09, 0xcf, 0x20, 0x23, 0x0b, 0x5f, 0x9a, 0x27, 0x30, 0x7f, 0xf9, 0x94, 0x5f, 0x72, 0x68,
	0x04, 0x81, 0x68, 0xcf, 0x61, 0x1b, 0xe4, 0x33, 0x02, 0xdb, 0x0e, 0xce, 0xd8, 0xad, 0x79, 0xa8,
	0xa3, 0x54, 0x99, 0x8c, 0x5a, 0xf1, 0x31, 0x77, 0xcb, 0x35, 0x30, 0xda, 0x84, 0x5b, 0x5b, 0x32,
	0x22, 0x65, 0xb5, 0x09, 0x35, 0x82, 0xdd, 0xbc, 0xd6, 0xa5, 0xd5, 0xe9, 0xdc, 0x63, 0x0d, 0x9f,
	0x70, 0x37, 0x97, 0x5b, 0x08, 0x23, 0xde, 0x5d, 0x02, 0x87, 0xe3, 0x7e, 0x3f, 0xe7, 0x08, 0xbb,
	0x85, 0xb0, 0x92, 0x8b, 0x7c, 0x65, 0x23, 0x2d, 0x3f, 0xe5, 0x4a, 0x16, 0x64, 0x61, 0x7e, 0x75,
	0x77, 0x6e, 0xb2, 0x42, 0xbe, 0xe0, 0xfc, 0xee, 0x1b, 0x18, 0xb2, 0x8f, 0xf3, 0x2c, 0x33, 0xfe,
	0xad, 0x81, 0x3f, 0xf2, 0x33, 0x66, 0x8f, 0xb6, 0x10, 0xb2, 0xfc, 0x9a, 0xa9, 0x14, 0x26, 0xc8,
	0x63, 0x7b, 0xc9, 0x2c, 0xeb, 0x06, 0x86, 0x2c, 0x55, 0xcc, 0xad, 0x83, 0x86, 0x7e, 0xce, 0x2c,
	0xeb, 0x2d, 0xd4, 0x60, 0x19, 0x27, 0x2b, 0xbb, 0x94, 0x27, 0x3b, 0x2c, 0x84, 0x05, 0xdf, 0x8a,
	0xe3, 0x2b, 0x55, 0xc6, 0xf7, 0xaa, 0xd4, 0xe3, 0xbc, 0x2c, 0x57, 0x85, 0x07, 0xae, 0x2f, 0x28,
	0xf0, 0x38, 0x79, 0xec, 0x08, 0x5e, 0x89, 0x43, 0x9c, 0xee, 0xd5, 0xea, 0xbd, 0xe6, 0x09, 0x8f,
	0x28, 0xf2, 0x50, 0x35, 0xc1, 0xe0, 0xb5, 0x38, 0xaa, 0x0d, 0xce, 0xff, 0x4b, 0x0a, 0x3b, 0x4a,
	0x76, 0x50, 0x64, 0xab, 0xe3, 0x68, 0x01, 0x5f, 0x31, 0x5b, 0xd2, 0x04, 0x77, 0xa2, 0x42, 0xb7,
	0x8e, 0xe5, 0x57, 0x8f, 0xa2, 0x10, 0xc4, 0x5a, 0x31, 0xaa, 0x40, 0xc0, 0xfc, 0xa9, 0xe5, 0x6b,
	0xae, 0x35, 0x69, 0x60, 0xd8, 0x31, 0xd8, 0x67, 0x1d, 0x79, 0xd8, 0xc1, 0x1f, 0x96, 0xf2, 0x6b,
	0xee, 0x58, 0xbc, 0x85, 0x76, 0x22, 0xce, 0x66, 0xf2, 0xcd, 0xa3, 0x88, 0xb3, 0xd9, 0x28, 0x43,
	0x55, 0x73, 0x0e, 0x28, 0x83, 0x23, 0xd1, 0x9a, 0x4e, 0x48, 0xf6, 0x86, 0x61, 0xcb, 0x4c, 0x70,
	0x25, 0x26, 0xda, 0x79, 0xc0, 0x50, 0xef, 0xba, 0x61, 0x27, 0x26, 0x0b, 0xd7, 0xf8, 0xe6, 0xa1,
	0x60, 0x99, 0x3b, 0x08, 0xdb, 0x1e, 0xce, 0x88, 0x5d, 0x1b, 0x1b, 0x93, 0xb6, 0x01, 0xb6, 0x84,
	0x33, 0x62, 0x13, 0xf8, 0xce, 0x90, 0xac, 0x0d, 0xc3, 0x36, 0x7e, 0x73, 0x46, 0xa5, 0x38, 0x0c,
	0x75, 0x1c, 0x1b, 0x7f, 0x1e, 0x45, 0xb0, 0x60, 0xbe, 0xf1, 0x68, 0x9f, 0x1e, 0x85, 0x4b, 0xef,
	0x54, 0xc6, 0x12, 0xdb, 0x0f, 0xdb, 0x16, 0xce, 0x35, 0xf9, 0x3e, 0x63, 0x44, 0xfe, 0x4d, 0x45,
	0x8e, 0x0f, 0x0e, 0xce, 0x9e, 0x9e, 0x6e, 0xbe, 0x62, 0xa7, 0x15, 0x31, 0x3a, 0xab, 0x37, 0xff,
	0x6a, 0x89, 0x41, 0x03, 0xc5, 0xd6, 0xe2, 0xba, 0x6a, 0xeb, 0xaf, 0x55, 0x99, 0xa9, 0x4a, 0xe8,
	0x87, 0x51, 0x03, 0x43, 0xf9, 0xb9, 0x52, 0x6e, 0x06, 0xea, 0x4d, 0x99, 0xf4, 0xc2, 0x6e, 0xc2,
	0x26, 0xfe, 0x18, 0xd1, 0x93, 0xc7, 0xe4, 0xdc, 0x27, 0xa7, 0x48, 0x6a, 0xa4, 0x2a, 0xa8, 0x5d,
	0x17, 0x04, 0xf1, 0x53, 0xbb, 0xc8, 0xff, 0x18, 0xe3, 0xfb, 0x95, 0xc4, 0x0b, 0x53, 0x23, 0x24,
	0xd7, 0xb0, 0x18, 0x46, 0x5b, 0x16, 0xf9, 0x1e, 0xc8, 0x75, 0x65, 0xe3, 0x04, 0xa6, 0xee, 0xa7,
	0x3c, 0x8d, 0x49, 0xe2, 0x7b, 0x61, 0xc7, 0x90, 0x85, 0xa2, 0xf4, 0xd6, 0xd8, 0x25, 0xa7, 0xcf,
	0x1a, 0xdf, 0x4f, 0x37, 0x00, 0x49, 0x67, 0x1e, 0x43, 0x92, 0x09, 0x29, 0x7c, 0x1f, 0xa4, 0x93,
	0xcd, 0xba, 0xb9, 0xa2, 0xd1, 0x5c, 0x78, 0xe3, 0xe7, 0xb5, 0x2e, 0xbf, 0xfb, 0x91, 0xa4, 0x1c,
	0xde, 0xc8, 0xc9, 0xba, 0x68, 0xff, 0xde, 0x2a, 0x16, 0x8b, 0x0e, 0xf5, 0xf5, 0xfb, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0xce, 0x92, 0x14, 0x32, 0x08, 0x00, 0x00,
}
